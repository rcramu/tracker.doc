[
    {
        "uri": "/content/basics/_index",
        "title": "Basics",
        "content": "\nChapter 1\n\n Basics\n\nDiscover what this Hugo theme is all about and the core-concepts behind it.\n",
        "tags": []
    },
    {
        "uri": "/content/basics/configuration/index",
        "title": "Configuration",
        "content": "\nSite configuration\n\nOn top of Hugo global configuration, Hugo-theme-learn lets you define the following parameters :\n\n[params]\n   Prefix URL to edit current page. Useful to give opportunity to people to create merge request for your doc.\n  # See the config.toml file from this documentation site to have an example.\n  editURL = \"\"\n  # Author of the site, will be used in meta information\n  author = \"\"\n  # Description of the site, will be used in meta information\n  description = \"\"\n  # Shows a checkmark for visited pages on the menu. Default to false\n  showVisitedLinks = false\n  # Automatically generates prev and next arrows\n  autoNav = false\n  # Activate search. Don't forget to generate the JSON index file (go check get started page)\n  search = false\n\nStyle customization\n\nHugo-theme-learn has been built to be as configurable as possible by defining multiple partials\n\nIn themes/hugo-theme-learn/layouts/partials/, you will find all the partials defined for this theme. If you need to overwrite something, don't change the code directly. Instead follow this page. You'd create a new partial in the layouts/partials folder of your local project. This partial will have the priority.\n\nThis theme defines the following partials :\n\nheader: the header of the content page (contains the breadcrumbs)\nstyle: CSS imports, in case you want to override the style\nfooter: the footer of the content page (contains the arrows)\nscript:  Javacript includes, in case you want to add Javascript on top of provided ones\nfavicon: the favicon\nlogo: the logo, on top left hand corner.\nmeta: HTML meta tags, if you want to change default behavior\ntoc: table of contents\n\n Change the logo\n\nCreate a new file in layouts/partials/ named logo.html. Then write any HTML you want.\nYou could use an img HTML tag and reference an image created under the static folder, or you could paste a SVG definition !\n\n{{% notice note %}}\nThe size of the logo will adapt automatically\n{{% /notice %}}\n\nChange the favicon\n\nIf your favicon is a png, just drop off your image in your local static/images/ folder and names it favicon.png\n\nIf you need to change this default behavior, create a new file in layouts/partials/ named favicon.html. Then write something like this:\n\nlink rel=\"shortcut icon\" href=\"/images/favicon.png\" type=\"image/x-icon\" /\n\n Change default colors\n\nTo change default colors, you will have to add a new css file. In order to do that :\n\nCreate a css file in your local static/css/ folder\nCreate a partial HTML in your local layouts/partials/ named style.html and add the following line\n\nlink href=\"/css/yourfile.css\" rel=\"stylesheet\"\n\nThen, create CSS in the new file, overwriting default behavior. Don't panic, we give you, just below, colors that are commonly changed.\n\n/* background behind the logo*/\nheader {\n    background: color;\n    border-color: color;\n}\n\n/* Background color of the menu */\nsidebar {\n  background-color: color;\n}\n\n/* Background color of the menu, when clicked */\nsidebar ul.topics  li.parent, sidebar ul.topics  li.active {\n  background-color: color;\n}\n\n/* Color of all links, including arrows to get to previous and next pages */\na {\n    color: color;\n}\na:hover {\n   color: color;\n}\n",
        "tags": []
    },
    {
        "uri": "/content/basics/installation/index",
        "title": "Getting started",
        "content": "\nThe following steps are here to help you initialize your new website. If you don't know Hugo at all, we strongly suggest you to train by following this great documentation for beginners.\n\nCreate your project\n\nHugo provides a new command to create a new website.\n\nhugo new site new_project\n\n Install the theme\n\nInstall the Hugo-theme-learn theme by following this documentation\n\nThe theme's repository is: https://github.com/matcornic/hugo-theme-learn.git\n\nBasic configuration\n\nWhen building the website, you can set a theme by using --theme option. We suggest you to edit your configuration file and set the theme by default. Example with config.toml format.\n\ntheme = \"hugo-theme-learn\"\n\n Create your first chapter page\n\nHugo-theme-learn provides archetypes to create skeletons for your website. Begin by creating your first chapter page with the following command\n\n_index.md files are considered as chapters\nhugo new --kind chapter basics/_index.md\n\n Create your first content pages\n\nThen, create content pages inside the previous chapter. Here are two ways to create content in the chapter :\n\nhugo new basics/first-content.md\nhugo new basics/second-content/index.md\n\nEnable search functionality\n\nAs the index generation is not yet supported by Hugo (PR 1853),\nwe decided to use lunr index.\nAs soon as the generation of the index will be supported by hugo, we will use the official format.\n\nSo to use the search functionality, you just have to put a lunr index which respects this format :\n[\n    {\n        \"uri\": \"/docs/01-start/index\",\n        \"title\": \"Get started\",\n        \"content\": \"\\n\\nGet started\\n\\nAll you need to know...\\n\",\n        \"tags\": [\"start\", \"intro\"]\n    },\n    ...\n]\n\ninto a static/json/search.json file in your hugo project.\n\nAnd set search = true in your config.toml\n\nTo generate your lunr index, you can see this project https://github.com/gwleclerc/lunr-hugo which parse your markdown files and extract toml and yaml headers to create index with corresponding format.\n\nIn order to generate the index of your static site launch the following comand after installing lunr-hugo using npm\n    lunr-hugo -i \"content directory/*/.md\" -o static/json/search.json -l header format (yaml or toml)\n\nLaunching the website\n\nLaunch the following command\n\nhugo serve\n\nGo to http://localhost:1313/basics\n\nIf you are curious, at the home page (http://localhost:1313/), you should see an empty homepage. It's because this theme does not really provide a default homepage.\n\nYou typically have 2 choices :\n\nCreate an overview homepage for your project. Write an index.html file in layouts/ folder.\nCreate a redirection to one your documentation page. Either by:\n  Configuring your server to automatically redirect homepage to one your documentation page - Recommended\n  Creating an empty html page with the following code in the head tag :  \n\n    meta http-equiv=\"refresh\" content=\"0; url=http://example.com/\"/\n  ",
        "tags": []
    },
    {
        "uri": "/content/basics/requirements/index",
        "title": "Requirements",
        "content": "\nThanks to the simplicity of Hugo, this page is as empty as this theme needs requirements.\n\nJust download Hugo binary for your OS (Windows, Linux, Mac) : it's that simple.\n\n",
        "tags": []
    },
    {
        "uri": "/content/basics/what-is-this-hugo-theme/index",
        "title": "What is this Hugo theme ?",
        "content": "\nHugo-theme-learn is a theme for Hugo, a fast and modern static website engine written in Go. Where Hugo is often used for blogs, this theme is fully designed for technical documentation.\n\nThis theme is a partial porting of the Learn theme of Grav, a modern flat-file CMS written in PHP.\n\nThis current documentation has been statically generated with Hugo with a simple command : hugo -t hugo-theme-learn\n\n",
        "tags": []
    },
    {
        "uri": "/content/cont/_index",
        "title": "Content",
        "content": "\nChapter 2\n\n Content\n\nFind out how to create and organize your content quickly and intuitively.\n",
        "tags": []
    },
    {
        "uri": "/content/cont/archetypes/index",
        "title": "Archetypes",
        "content": "\nUsing the command: hugo new relative new content path], you can start a content file with the date and title automatically set. While this is a welcome feature, active writers need more : [archetypes.\n\nIt is pre-configured skeleton pages with default front matter. Please refer to the documentation for types of page to understand the differences.\n\nChapter\n\nTo create a Chapter page, run the following commands\n\nhugo new --kind chapter name/_index.md\n\nIt will create a page with predefined Front-Matter:\n\n    ---\n    date: 2016-04-10T23:17:49+02:00\n    icon: bX. /b\n    title: index\n    weight: 0\n    ---\n\n     Chapter X\n\n    # Some Chapter title\n\n    Lorem ipsum\n\nDefault\n\nTo create a default page, run either one of the following commands\n\n Either\nhugo new chapter/name/index.md\nOr\nhugo new chapter/name.md\n\nIt will create a page with predefined Front-Matter:\n\n    ---\n    date: 2016-04-09T17:51:50+02:00\n    title: index\n    toc: true\n    weight: 5\n    ---\n\n    Lorem Ipsum\n\nDon't forget that Hugo-theme-learn supports only one level under a chapter\n",
        "tags": []
    },
    {
        "uri": "/content/cont/markdown/index",
        "title": "Markdown syntax",
        "content": "\n\nLet's face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.\n\nMarkdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it.\n\nSome of the key benefits are:\n\nMarkdown is simple to learn, with minimal extra characters so it's also quicker to write content.\nLess chance of errors when writing in markdown.\nProduces valid XHTML output.\nKeeps the content and the visual display separate, so you cannot mess up the look of your site.\nWrite in any text editor or Markdown application you like.\nMarkdown is a joy to use!\n\nJohn Gruber, the author of Markdown, puts it like this:\n\n The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email.\n -- citeJohn Gruber/cite\n\nGrav ships with built-in support for Markdown and Markdown Extra. You must enable Markdown Extra in your system.yaml configuration file\n\nWithout further delay, let us go over the main elements of Markdown and what the resulting HTML looks like:\n\n{{% notice info %}}\ni class=\"fa fa-bookmark\"/i Bookmark this page for easy future reference!\n{{% /notice %}}\n\nHeadings\n\nHeadings from h1 through h6 are constructed with a `` for each level:\n\nh1 Heading\n h2 Heading\nh3 Heading\n h4 Heading\nh5 Heading\n h6 Heading\n\nRenders to:\n\nh1 Heading\n h2 Heading\nh3 Heading\n h4 Heading\nh5 Heading\n h6 Heading\n\nHTML:\n\nh1h1 Heading/h1\nh2h2 Heading/h2\nh3h3 Heading/h3\nh4h4 Heading/h4\nh5h5 Heading/h5\nh6h6 Heading/h6\n\nComments\n\nComments should be HTML compatible\n\n<!--\nThis is a comment\n--\nComment below should NOT be seen:\n\n<!--\nThis is a comment\n--\n\n Horizontal Rules\n\nThe HTML hr element is for creating a \"thematic break\" between paragraph-level elements. In markdown, you can create a hr with any of the following:\n\n___: three consecutive underscores\n---: three consecutive dashes\n***: three consecutive asterisks\n\nrenders to:\n\n___\n\n---\n\n***\n\nBody Copy\n\nBody copy written as normal, plain text will be wrapped with p/p tags in the rendered HTML.\n\nSo this body copy:\n\nLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\nrenders to this HTML:\n\npLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad./p\n\n Emphasis\n\nBold\nFor emphasizing a snippet of text with a heavier font-weight.\n\nThe following snippet of text is rendered as bold text.\n\nrendered as bold text\nrenders to:\n\nrendered as bold text\n\nand this HTML\n\nstrongrendered as bold text/strong\n\n Italics\nFor emphasizing a snippet of text with italics.\n\nThe following snippet of text is rendered as italicized text.\n\nrendered as italicized text\n\nrenders to:\n\nrendered as italicized text\n\nand this HTML:\n\nemrendered as italicized text/em\n\nstrikethrough\nIn GFM (GitHub flavored Markdown) you can do strikethroughs.\n\nStrike through this text.\nWhich renders to:\n\nStrike through this text.\n\nHTML:\n\ndelStrike through this text./del\n\n Blockquotes\nFor quoting blocks of content from another source within your document.\n\nAdd `` before any text you want to quote.\n\n Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n\nRenders to:\n\n Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n\nand this HTML:\n\nblockquote\n  pstrongFusion Drive/strong combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined./p\n/blockquote\n\nBlockquotes can also be nested:\n\n Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue.\nNunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\n Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor\nodio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\n\nRenders to:\n\n Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue.\nNunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\n Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor\nodio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\n\nNotices\n\n{{% notice note %}}\nThe old mechanism for notices overriding the block quote syntax (``) has been deprecated.  Notices are now handled via a dedicated plugin called Markdown Notices\n{{% /notice %}}\n\n Lists\n\nUnordered\nA list of items in which the order of the items does not explicitly matter.\n\nYou may use any of the following symbols to denote bullets for each list item:\n\nvalid bullet\nvalid bullet\nvalid bullet\n\nFor example\n\nLorem ipsum dolor sit amet\nConsectetur adipiscing elit\nInteger molestie lorem at massa\nFacilisis in pretium nisl aliquet\nNulla volutpat aliquam velit\n  Phasellus iaculis neque\n  Purus sodales ultricies\n  Vestibulum laoreet porttitor sem\n  Ac tristique libero volutpat at\nFaucibus porta lacus fringilla vel\nAenean sit amet erat nunc\nEget porttitor lorem\nRenders to:\n\nLorem ipsum dolor sit amet\nConsectetur adipiscing elit\nInteger molestie lorem at massa\nFacilisis in pretium nisl aliquet\nNulla volutpat aliquam velit\n  Phasellus iaculis neque\n  Purus sodales ultricies\n  Vestibulum laoreet porttitor sem\n  Ac tristique libero volutpat at\nFaucibus porta lacus fringilla vel\nAenean sit amet erat nunc\nEget porttitor lorem\n\nAnd this HTML\n\nul\n  liLorem ipsum dolor sit amet/li\n  liConsectetur adipiscing elit/li\n  liInteger molestie lorem at massa/li\n  liFacilisis in pretium nisl aliquet/li\n  liNulla volutpat aliquam velit\n    ul\n      liPhasellus iaculis neque/li\n      liPurus sodales ultricies/li\n      liVestibulum laoreet porttitor sem/li\n      liAc tristique libero volutpat at/li\n    /ul\n  /li\n  liFaucibus porta lacus fringilla vel/li\n  liAenean sit amet erat nunc/li\n  liEget porttitor lorem/li\n/ul\n\n Ordered\n\nA list of items in which the order of items does explicitly matter.\n\nLorem ipsum dolor sit amet\nConsectetur adipiscing elit\nInteger molestie lorem at massa\nFacilisis in pretium nisl aliquet\nNulla volutpat aliquam velit\nFaucibus porta lacus fringilla vel\nAenean sit amet erat nunc\nEget porttitor lorem\nRenders to:\n\nLorem ipsum dolor sit amet\nConsectetur adipiscing elit\nInteger molestie lorem at massa\nFacilisis in pretium nisl aliquet\nNulla volutpat aliquam velit\nFaucibus porta lacus fringilla vel\nAenean sit amet erat nunc\nEget porttitor lorem\n\nAnd this HTML:\n\nol\n  liLorem ipsum dolor sit amet/li\n  liConsectetur adipiscing elit/li\n  liInteger molestie lorem at massa/li\n  liFacilisis in pretium nisl aliquet/li\n  liNulla volutpat aliquam velit/li\n  liFaucibus porta lacus fringilla vel/li\n  liAenean sit amet erat nunc/li\n  liEget porttitor lorem/li\n/ol\n\nTIP: If you just use 1. for each number, Markdown will automatically number each item. For example:\n\nLorem ipsum dolor sit amet\nConsectetur adipiscing elit\nInteger molestie lorem at massa\nFacilisis in pretium nisl aliquet\nNulla volutpat aliquam velit\nFaucibus porta lacus fringilla vel\nAenean sit amet erat nunc\nEget porttitor lorem\n\nRenders to:\n\nLorem ipsum dolor sit amet\nConsectetur adipiscing elit\nInteger molestie lorem at massa\nFacilisis in pretium nisl aliquet\nNulla volutpat aliquam velit\nFaucibus porta lacus fringilla vel\nAenean sit amet erat nunc\nEget porttitor lorem\n\nCode\n\n Inline code\nWrap inline snippets of code with `  ``.\n\nIn this example, section/section should be wrapped as code.\n\nRenders to:\n\nIn this example, section/section should be wrapped with code.\n\nHTML:\n\npIn this example, code&lt;section&gt;&lt;/section&gt;/code should be wrapped with strongcode/strong./p\n\nIndented code\n\nOr indent several lines of code by at least four spaces, as in:\n\npre\n  // Some comments\n  line 1 of code\n  line 2 of code\n  line 3 of code\n/pre\n\nRenders to:\n\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n\nHTML:\n\npre\n  code\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n  /code\n/pre\n\n Block code \"fences\"\n\nUse \"fences\"  \npre\nSample text here...\n/pre\n\nSample text here...\n\nHTML:\n\npre\n  codeSample text here.../code\n/pre\n\nSyntax highlighting\n\nGFM, or \"GitHub Flavored Markdown\" also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code \"fence\", ` \npre\ngrunt.initConfig({\n  assemble: {\n    options: {\n      assets: 'docs/assets',\n      data: 'src/data/*.{json,yml}',\n      helpers: 'src/custom-helpers.js',\n      partials: ['src/partials/*/.{hbs,md}']\n    },\n    pages: {\n      options: {\n        layout: 'default.hbs'\n      },\n      files: {\n        './': ['src/templates/pages/index.hbs']\n      }\n    }\n  }\n};\n/pre\n\nRenders to:\n\ngrunt.initConfig({\n  assemble: {\n    options: {\n      assets: 'docs/assets',\n      data: 'src/data/*.{json,yml}',\n      helpers: 'src/custom-helpers.js',\n      partials: ['src/partials/*/.{hbs,md}']\n    },\n    pages: {\n      options: {\n        layout: 'default.hbs'\n      },\n      files: {\n        './': ['src/templates/pages/index.hbs']\n      }\n    }\n  }\n};\n\n Tables\nTables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned.\n\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\nRenders to:\n\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\nAnd this HTML:\n\ntable\n  tr\n    thOption/th\n    thDescription/th\n  /tr\n  tr\n    tddata/td\n    tdpath to data files to supply the data that will be passed into templates./td\n  /tr\n  tr\n    tdengine/td\n    tdengine to be used for processing templates. Handlebars is the default./td\n  /tr\n  tr\n    tdext/td\n    tdextension to be used for dest files./td\n  /tr\n/table\n\nRight aligned text\n\nAdding a colon on the right side of the dashes below any heading will right align text for that column.\n\n| Option | Description |\n| ------:| -----------:|\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n| Option | Description |\n| ------:| -----------:|\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n Links\n\nBasic link\n\nAssemble\n\nRenders to (hover over the link, there is no tooltip):\n\nAssemble\n\nHTML:\n\na href=\"http://assemble.io\"Assemble/a\n\n Add a title\n\nUpstage\n\nRenders to (hover over the link, there should be a tooltip):\n\nUpstage\n\nHTML:\n\na href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"Upstage/a\n\nNamed Anchors\n\nNamed anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters:\n\n Table of Contents\n  Chapter 1\n  Chapter 2\n  Chapter 3\nwill jump to these sections:\n\nChapter 1 a id=\"chapter-1\"/a\nContent for chapter one.\n\n Chapter 2 a id=\"chapter-2\"/a\nContent for chapter one.\n\nChapter 3 a id=\"chapter-3\"/a\nContent for chapter one.\nNOTE that specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works.\n\n Images\nImages have a similar syntax to links but include a preceding exclamation point.\n\nor\n\nLike links, Images also have a footnote style syntax\n\nAlternative usage : note images\n\nWith a reference later in the document defining the URL location:\n\n[id]: http://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\n\n    [id]: http://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\n\n Resizing image\n\nAdd HTTP parameters width and/or height to the link image to resize the image. Values are CSS values (default is auto).\n\nAdd CSS classes\n\nAdd a HTTP classes parameter to the link image to add CSS classes. shadowand border are available but you could define other ones.\n\n",
        "tags": []
    },
    {
        "uri": "/content/cont/pages/index",
        "title": "Pages",
        "content": "\nIn Hugo, pages are the core of your site. Once it is configure, pages are definitely the added value to your documentation site.\n\nFolders\n\nOrganize your site like any other Hugo project. Typically, you will have a content folder with all your pages.\n\n    .\n    └── content\n        ├── brace\n        |   ├── yourselves.md   <- http://example.com/brace/yourselves/\n        |   ├── winter\n        |   |   └── index.md    <- http://example.com/brace/winter/\n        |   └── index.md        <- http://example.com/brace/\n        ├── is\n        |   ├── coming.md       <- http://example.com/is/comming/\n        |   └── index.md        <- http://example.com/is/\n        └── ned-stark.md        <- http://example.com/ned-stark/\n\n Types\n\nHugo-theme-learn defines two types of pages. Default and Chapter.\n\nA Chapter is a page that contains another page. Commonly, it contains a simple title and a catch line to define content that can be found under it.\nYou can define any HTML as prefix for the menu. In the example below, it's just a number but that could be an icon.\n\n    ---\n    title: Basics\n    chapter: true\n    weight: 0\n    icon: \"b1. /b\"\n    ---\n\n    ### Chapter 1\n\n    # Basics\n\n    Discover what this Hugo theme is all about and the core-concepts behind it.\n\nA Default page is any other content page.\n\n    ---\n    title: What is this Hugo theme ?\n    weight: 5\n    ---\n\n    Hugo-theme-learn is a theme for Hugo, a fast and modern static website engine written in Go. Where Hugo is often used for blogs, this theme is fully designed for technical documentation.\n\n    This theme is a partial porting of the Learn theme of Grav, a modern flat-file CMS written in PHP.\n\n    This current documentation has been statically generated with Hugo with a simple command : hugo -t hugo-theme-learn\n\n    \n\nTo tell Hugo-theme-learn to consider a page as a chapter, just the name of your file as _index.md.\n\nHugo-theme-learn provides archetypes to help you create this kind of pages.\n\nFront Matter\n\nEach Hugo page has to define a Front Matter in yaml, toml or json.\n\nHugo-theme-learn uses the following parameters on top of the existing ones :\n\n+++\n Set to true, it automatically generates a table of contents, available in the top of the screen.\ntoc = \"false\"\nOverride path to previous page. This theme automatically generates previous arrows \nprev = \"\"\n Override path to next page. This theme automatically generates next arrows \nnext = \"\"\nSet HTML in this parameter. The chapter title in the menu will be prefixed by this. Useful for icons.\nicon: \"\"\n+++\n\n Ordering\n\nHugo provides a flexible way to handle order for your pages.\n\nThe simplest way is to use weight parameter in the front matter of your page.\n\n{{% notice tip %}}\nBe aware that weight are applied separately for each kind of page (Chapter and Default). It means that if you mix chapter pages and default pages at the same level, the order won't be displayed as expected. \n\n{{% /notice %}}\n\nThe workaround is to override page type by adding chapter: false in the front matter of your Chapter page (identified as _index.md file).\n\nFor example, with 5 chapters page and 1 default page at the same level, rename the default page as _index.md and add chapter: false in the front-matter. It will then be considered as chapter for weight order computing, but content will be displayed as a default page.\n",
        "tags": []
    },
    {
        "uri": "/content/cont/shortcodes/index",
        "title": "Shortcodes",
        "content": "\nHugo uses Markdown for its simple content format. However, there are a lot of things that Markdown doesn’t support well. You could use pure HTML to expand possibilities.\n\nBut this happens to be a bad idea. Everyone uses Markdown because it's pure and simple to read even non-rendered. You should avoid HTML to keep it as simple as possible.\n\nTo avoid this limitations, Hugo created shortcodes. A shortcode is a simple snippet inside a page.\n\nHugo-theme-learn provides multiple shortcodes on top of existing ones.\n\nButton\n\nButton is a just a clickable button with optional icon.\n\n{{%/* button href=\"https://getgrav.org/\" /%}}Get Grav{{%/ /button */%}}\n{{%/* button href=\"https://getgrav.org/\" icon=\"fa fa-play\" /%}}Get Grav with icon{{%/ /button */%}}\n{{%/* button href=\"https://getgrav.org/\" icon=\"fa fa-share\" icon-position=\"right\" /%}}Get Grav with icon right{{%/ /button */%}}\n\n{{% button href=\"https://getgrav.org/\" %}}Get Grav{{% /button %}}\n{{% button href=\"https://getgrav.org/\" icon=\"fa fa-play\" %}}Get Grav with icon{{% /button %}}\n{{% button href=\"https://getgrav.org/\" icon=\"fa fa-share\" icon-position=\"right\" %}}Get Grav with icon right{{% /button %}}\n",
        "tags": []
    },
    {
        "uri": "/content/contributing/_index",
        "title": "Contributing",
        "content": "\nTo help the world be a better place, you could :\n\nContribute to this doc by using Edit this page link.\nContribute to Hugo, the static website generator which this theme is for\nContribute to Grav, the flat file CMS of which this theme is from (Thanks to MIT license)\nContribute to the Hugo-theme-learn theme itself\n\nContributors\n\nThanks to them <3\n\nmatcornic\nlierdakil\ngwleclerc\nXipas\nThiht\ngiuliov\nripienaar\nkamilchm\nJohnBlood\n\n TODO\n\nHandling more than 2 levels in documentation.\nSearch in site\nHandling videos\nAdd optional button to create doc issue (like github)\n",
        "tags": []
    }
]